
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */


 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)

 #define macro FOO() = takes(0) returns(1){
    0x02
    0x00
    mstore
    0x20 0x00 return
 }

 #define macro BAR() = takes(0) returns(1){
    0x03
    0x00
    mstore
    0x20 0x00 return
 }


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xE0 shr

    dup1
    __FUNC_SIG(foo)
    eq
    foo jumpi
    // don't need to pop here, will cause Stack Underflow
    __FUNC_SIG(bar)
    eq
    bar jumpi
    0x00 0x00 revert

    foo:
        FOO()
    bar:
        BAR()

}