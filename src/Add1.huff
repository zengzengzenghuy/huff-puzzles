
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */
 //https://docs.huff.sh/get-started/huff-by-example/#macros

#define function add1(uint256) payable returns(uint256)

// define the function logic in macro after you define the function name!
#define macro ADD1() = takes(1) returns (1){
    0x01
    add
}
   
 


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload  // [calldata]
    0xE0 shr // [function_sig]

    __FUNC_SIG(add1)      // [func_sig(addWord), func_sig]
    eq                       // [func_sig(addWord) == func_sig]
    add1 jumpi           // []

    0x00 0x00 revert // if not matching function sig, revert

    add1:
        0x04 calldataload
        ADD1()
        0x00 mstore
        0x20 0x00
        return

}